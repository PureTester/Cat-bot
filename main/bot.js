import { Telegraf } from "telegraf";
import { scheduleJob } from "node-schedule";
import pg from "pg";
const { Client } = pg;
import dotenv from "dotenv";
dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const BOT_TOKEN =
  process.env.BOT_TOKEN || "7992161931:AAHkzPMR5VsPOgFIxjbBNy2w1jpuydurrpA";
const dbConfig = {
  user: process.env.DB_USER || "postgres",
  host: process.env.DB_HOST || "localhost",
  database: process.env.DB_NAME || "postgres",
  password: process.env.DB_PASSWORD || "Putin",
  port: parseInt(process.env.DB_PORT || "5432"),
};

const dbClient = new Client(dbConfig);
const bot = new Telegraf(BOT_TOKEN);

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userState = {};

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
dbClient
  .connect()
  .then(() => console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ."))
  .catch((err) => console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err));

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function addUser(userId, username) {
  try {
    const query = "INSERT INTO users (id, username) VALUES ($1, $2)";
    await dbClient.query(query, [userId, username]);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    throw error;
  }
}

const menuKeyboard = {
  reply_markup: JSON.stringify({
    keyboard: [
      [{ text: "–î–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É üêæ " }],
      [{ text: "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä" }],
    ],
    resize_keyboard: true, // –°–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ
  }),
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
// bot.use(async (ctx) => {
//   if (ctx.message && ctx.message.text) {
//     const message = ctx.message.text.trim().toLowerCase();

//     if (message === "–¥–∞") {
//       await handleDoseConfirmation(ctx);
//     } else if (message !== "/start" || "/stats") {
//       ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.");
//     } else {
//       ctx.reply(
//         '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —Ç–∞–±–ª–µ—Ç–∫–∞ –±—ã–ª–∞ –¥–∞–Ω–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "–¥–∞".'
//       );
//     }
//   }
// });

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command("start", async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username || "unknown";

  try {
    const userExists = await checkUserExists(userId);
    if (!userExists) {
      await addUser(userId, username);
    }

    userState[userId] = {
      lastTaken: { morning: false, afternoon: false, evening: false },
    };

    ctx.reply(
      "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –¥–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É –∫–æ—Ç—É.",
      menuKeyboard
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function loadUserStateFromDB() {
  try {
    const usersQuery = "SELECT id FROM users";
    const usersResult = await dbClient.query(usersQuery);

    for (const userRow of usersResult.rows) {
      const userId = userRow.id;

      const statsQuery = `
        SELECT morning, afternoon, evening
        FROM statistics
        WHERE user_id = $1
        ORDER BY data DESC
        LIMIT 1
      `;
      const statsResult = await dbClient.query(statsQuery, [userId]);

      if (statsResult.rowCount > 0) {
        const lastRecord = statsResult.rows[0];
        userState[userId] = {
          lastTaken: {
            morning: lastRecord.morning,
            afternoon: lastRecord.afternoon,
            evening: lastRecord.evening,
          },
        };
      } else {
        userState[userId] = {
          lastTaken: { morning: false, afternoon: false, evening: false },
        };
      }
    }

    console.log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "–¥–∞"
bot.hears("–î–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É üêæ", async (ctx) => {
  const userId = ctx.from.id;

  if (!userState[userId]) {
    return ctx.reply("–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start.", menuKeyboard);
  }

  const currentHour = new Date().getHours();
  let timeSlot;

  if (currentHour >= 6 && currentHour < 14) {
    timeSlot = "morning";
  } else if (currentHour >= 14 && currentHour < 18) {
    timeSlot = "afternoon";
  } else if (currentHour >= 18) {
    timeSlot = "evening";
  } else {
    ctx.reply("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.");
    return;
  }

  try {
    userState[userId].lastTaken[timeSlot] = true;
    await saveDose(userId, timeSlot);
    ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø–æ–º–Ω–∏–ª, —á—Ç–æ —Ç–∞–±–ª–µ—Ç–∫–∞ –±—ã–ª–∞ –¥–∞–Ω–∞ –≤ ${timeSlot}.`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∑—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveDose(userId, timeSlot) {
  const today = new Date().toISOString().split("T")[0];

  try {
    const checkQuery = `
      SELECT * FROM statistics 
      WHERE user_id = $1 AND data = $2
    `;
    const result = await dbClient.query(checkQuery, [userId, today]);

    if (result.rowCount === 0) {
      const insertQuery = `
        INSERT INTO statistics (user_id, data, morning, afternoon, evening)
        VALUES ($1, $2, $3, $4, $5)
      `;
      await dbClient.query(insertQuery, [userId, today, false, false, false]);
    }

    const updateQuery = `
      UPDATE statistics
      SET ${timeSlot} = TRUE
      WHERE user_id = $1 AND data = $2
    `;
    await dbClient.query(updateQuery, [userId, today]);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∑—ã:", error);
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserExists(userId) {
  try {
    const query = "SELECT * FROM users WHERE id = $1";
    const result = await dbClient.query(query, [userId]);
    return result.rowCount > 0;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    throw error;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
function sendReminder(timeSlot) {
  return async function () {
    try {
      const query = "SELECT id FROM users";
      const result = await dbClient.query(query);

      for (const row of result.rows) {
        const userId = row.id;
        const userExists = await checkUserExists(userId);

        if (userExists) {
          await bot.telegram.sendMessage(
            userId,
            `–ù–µ –∑–∞–±—É–¥—å –¥–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É –∫–æ—Ç—É! (${timeSlot})`
          );
        }
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", err);
    }
  };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–æ–∑
function checkMissedDoses() {
  return async function () {
    const today = new Date().toISOString().split("T")[0];

    try {
      const query = "SELECT id FROM users";
      const result = await dbClient.query(query);

      for (const row of result.rows) {
        const userId = row.id;

        if (!userState[userId]) {
          userState[userId] = {
            lastTaken: { morning: false, afternoon: false, evening: false },
          };
        }

        const doses = userState[userId].lastTaken;
        const missedSlots = [];

        if (!doses.morning) missedSlots.push("—É—Ç—Ä–æ–º");
        if (!doses.afternoon) missedSlots.push("–≤ –æ–±–µ–¥");
        if (!doses.evening) missedSlots.push("–≤–µ—á–µ—Ä–æ–º");

        if (missedSlots.length > 0) {
          const message = `–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–∏—ë–º —Ç–∞–±–ª–µ—Ç–∫–∏ –∫–æ—Ç—É ${missedSlots.join(
            ", "
          )}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!`;
          await bot.telegram.sendMessage(userId, message);
        }

        await saveStatistics(userId, today, doses);
        userState[userId].lastTaken = {
          morning: false,
          afternoon: false,
          evening: false,
        };
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–æ–∑:", error);
    }
  };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function saveStatistics(userId, data, doses) {
  try {
    const query = `
      INSERT INTO statistics (user_id, data, morning, afternoon, evening)
      VALUES ($1, $2, $3, $4, $5)
      ON CONFLICT (user_id, data) DO UPDATE
      SET morning = EXCLUDED.morning,
          afternoon = EXCLUDED.afternoon,
          evening = EXCLUDED.evening
    `;
    await dbClient.query(query, [
      userId,
      data,
      doses.morning,
      doses.afternoon,
      doses.evening,
    ]);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    throw error;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /stats
bot.hears("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä", async (ctx) => {
  const userId = ctx.from.id;

  try {
    const query = `
      SELECT data, morning, afternoon, evening
      FROM statistics
      WHERE user_id = $1
      ORDER BY data DESC
    `;
    const result = await dbClient.query(query, [userId]);

    if (result.rowCount === 0) {
      return ctx.reply("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
    }

    let message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n";
    result.rows.forEach((row) => {
      const date = row.data;
      const status = `–£—Ç—Ä–æ: ${row.morning ? "‚úÖ" : "‚ùå"}, –û–±–µ–¥: ${
        row.afternoon ? "‚úÖ" : "‚ùå"
      }, –í–µ—á–µ—Ä: ${row.evening ? "‚úÖ" : "‚ùå"}`;
      message += `${date} - ${status}\n`;
    });

    ctx.reply(message);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
scheduleJob("0 6 * * *", sendReminder("morning")); // –í 6:00
scheduleJob("0 14 * * *", sendReminder("afternoon")); // –í 14:00
scheduleJob("0 18 * * *", sendReminder("evening")); // –í 18:00
scheduleJob("0 20 * * *", checkMissedDoses()); // –í 20:00

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
loadUserStateFromDB()
  .then(() => {
    bot.launch();
    console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.");
  })
  .catch((err) => {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:", err);
  });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once("SIGINT", () => {
  dbClient
    .end()
    .then(() => console.log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ."))
    .catch((err) =>
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:", err)
    );
  bot.stop();
  console.log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
});
